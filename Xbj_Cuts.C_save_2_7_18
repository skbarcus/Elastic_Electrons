#include "Riostream.h"
#include <TFile.h>
#include <TF1.h>
#include <TH1.h>
#include <TH2.h>
#include <TGraphErrors.h>
#include <TTree.h>
#include <TROOT.h>
#include <TLegend.h>
#include <math.h>
//#define theta1 21.;

Double_t xmin = 2.92, xmax = 3.15;
Double_t fitmin = 2.4, fitmax = 3.4;

void Xbj_Cuts() 
{
  TChain *T = new TChain("T");
  T->Add("/home/skbarcus/Tritium/Analysis/He3/Rootfiles/e08014_3892.root");
  T->Add("/home/skbarcus/Tritium/Analysis/He3/Rootfiles/e08014_3893.root");
  T->Add("/home/skbarcus/Tritium/Analysis/He3/Rootfiles/e08014_3894.root");
  T->Add("/home/skbarcus/Tritium/Analysis/He3/Rootfiles/e08014_4073.root");
  T->Add("/home/skbarcus/Tritium/Analysis/He3/Rootfiles/e08014_4074*.root");
  T->Add("/home/skbarcus/Tritium/Analysis/He3/Rootfiles/e08014_4075*.root");

  T->SetBranchStatus("*",0);
  T->SetBranchStatus("EKL.x_bj",1);
  T->SetBranchStatus("L.tr.tg_y",1);
  T->SetBranchStatus("L.tr.n",1);
  T->SetBranchStatus("L.cer.asum_c",1);
  T->SetBranchStatus("L.prl1.e",1);
  T->SetBranchStatus("L.prl2.e",1);
  //T->SetBranchStatus("L.tr.p",1);
  T->SetBranchStatus("DBB.evtypebits",1);

  Double_t x_bj=0.,L_tr_tg_y[21],L_cer=0.,L_prl1_e=0.,L_prl2_e=0.,L_tr_p=0.,L_tr_n=0.,evtypebits;

  T->SetBranchAddress("EKL.x_bj",&x_bj);
  T->SetBranchAddress("L.tr.tg_y",&L_tr_tg_y);
  T->SetBranchAddress("L.tr.n",&L_tr_n);
  T->SetBranchAddress("L.cer.asum_c",&L_cer);
  T->SetBranchAddress("L.prl1.e",&L_prl1_e);
  T->SetBranchAddress("L.prl2.e",&L_prl2_e);
  //T->SetBranchAddress("L.tr.p",L_tr_p);
  T->SetBranchAddress("DBB.evtypebits",&evtypebits);

  Int_t nevts = T->GetEntries();
  //Double_t xmin = 0., xmax = 0.;

  cout<<"nevts = "<<nevts<<endl;
 
  TCanvas* c1=new TCanvas("c1");
  c1->SetGrid();
  c1->SetLogy();

  //T->Draw("EKL.x_bj>>h2(1000,0.5,3.5)","L.cer.asum_c>60 && (L.prl1.e+L.prl2.e)/L.tr.p/1000>0.7 && L.tr.tg_y>-0.028 && L.tr.tg_y<0.028 && L.tr.n==1 && (DBB.evtypebits>>3)&1");

  //T->Draw("EKL.x_bj>>h2(1000,0.5,3.5)","L.tr.tg_y>-0.028 && L.tr.tg_y<0.028 && L.tr.n==1 && (DBB.evtypebits>>3)&1");

  //Create and fill histogram with Xbj values with various cuts applied to the data.
  TH1D *h1 = new TH1D("h1","Xbj" , 1000, 0., 4.);
  Int_t evt_136=0,evt_8=0;
  Int_t maxtracks=0;
  for(Int_t i=0;i<nevts;i++) 
    {
      T->GetEntry(i);
      //T->Show(i);
      /*if( (evtypebits&1<<3)==1<<3 )
	{
	  cout<<evtypebits<<endl;
	  }*/
      /*if(L_tr_n>maxtracks)
	{
	  maxtracks=L_tr_n;
	  cout<<"Max Track Number = "<<maxtracks<<" at event "<<i<<"."<<endl;
	  }*/
      /*
      if(evtypebits==136)
	{
	  evt_136++;
	}
      if(evtypebits==8)
	{
	  evt_8++;
	  }*/
      if(L_tr_tg_y[0]>-0.028 && L_tr_tg_y[0]<0.028 && L_tr_n==1 && (evtypebits&1<<3)==1<<3) //&& (evtypebits>>3)&1)
      //if(L_tr_n==1 && (evtypebits&1<<3)==1<<3)
	{
	  h1->Fill(x_bj);
	}
    }
  h1->Draw();
  //cout<<"# evt_136 = "<<evt_136<<endl;
  //cout<<"# evt_8 = "<<evt_8<<endl;

  
  //Create an exponential fit function to fit the region with the elastic peak, but excluding the peak itself.
  Double_t fitf(Double_t *x,Double_t *par) 
  {
    Bool_t reject;
    reject = kTRUE;
    //reject = kFALSE;
    if (reject && x[0] > xmin && x[0] < xmax) 
      {
	TF1::RejectPoint();
	return 0;
      }
    Double_t fitval = TMath::Exp(par[0]+par[1]*x[0]);
    return fitval;
  }

  //Create a function that draws the full fit including over the elastic peak region.
  Double_t fit_full(Double_t *x,Double_t *par) 
  {
    Double_t fitval = TMath::Exp(par[0]+par[1]*x[0]);
    return fitval;
  }

  //Fit the histogram excluding the elastic peak.
  TF1 *func = new TF1("fitf",fitf,fitmin,fitmax,2);
  func->SetParameter(0,12.);
  func->SetParameter(1,-3.);
  h1->Fit("fitf","R0");
  
  //Plot the full fit including the elstic peak.
  TF1 *func_full = new TF1("fit_full",fit_full,fitmin,fitmax,2);
  func_full->SetParameter(0,func->GetParameter(0));
  func_full->SetParameter(1,func->GetParameter(1));
  func_full->Draw("same");
  cout<<"par[0] = "<<func->GetParameter(0)<<"   par[1] = "<<func->GetParameter(1)<<endl;
  
  /*
  //Loop through data again and figure out how many counts are in the elastic peak. i.e. Check how many counts fall above the fit function in the region of the elastic peak.
  Int_t elastic_evts = 0;
  for(Int_t i=0;i<nevts;i++) 
    {
      T->GetEntry(i);
      if(L_tr_tg_y[0]>-0.028 && L_tr_tg_y[0]<0.028 && L_tr_n==1 && (evtypebits&1<<3)==1<<3 && x_bj>2.92 && x_bj<3.15 && func_full->Eval(x_bj))
	{
	  elastic_evts++;
	}
    }
  cout<<"There were approximately "<<elastic_evts<<" events above background in the elastic region."<<endl;
  */

  //Create another histogram with the same bin sizes in the region of the elastic peak with the same bin widths as the Xbj histo. This new histo can then be integrated and compare with the Xbj histogram.
  //Calculate bin width in the region of the elastic peak.
  TAxis *axis = h1->GetXaxis();
  Int_t bmin = axis->FindBin(xmin); 
  Int_t bmax = axis->FindBin(xmax);
  Double_t nbins = bmax-bmin;
  Double_t bin_width = (xmax-xmin)/nbins;
  cout<<"bmin = "<<bmin<<"   bmax = "<<bmax<<"   nbins = "<<nbins<<"   bin_width = "<<bin_width<<endl;
  TH1D *h2 = new TH1D("h2","Fit Xbj" , nbins, xmin, xmax);

  //Fill the fit histogram.
  for(Int_t i=0;i<nbins;i++)
    {
      //h2->Fill(func_full->Eval(h1->GetXaxis()->GetBinCenter(h1->GetXaxis()->FindBin(bmin+i))));
      h2->SetBinContent(i, func_full->Eval( h1->GetXaxis()->GetBinCenter(bmin+i) ) );
      //cout<<"bin "<<bmin+i<<" has x value "<<h1->GetXaxis()->GetBinCenter(bmin+i)<<" and func_full->Eval("<<h1->GetXaxis()->GetBinCenter(bmin+i)<<") = "<<func_full->Eval( h1->GetXaxis()->GetBinCenter(bmin+i) )<<endl;
    }
  h2->Draw("same");
  h2->SetLineColor(kRed);

  //Find the integrals of the two histograms and subtract the fit histo integral from the Xbj histo to get the approximate number of events in the elastic peak.
  Double_t int_hist = h1->Integral(bmin,bmax);
  Double_t int_fit = h2->Integral(0,nbins-1);

  cout<<"The integral of the elastic peak region of the histogram is "<<int_hist<<". The integral of the fit function in the region of the elastic peak is "<<int_fit<<". Thus there are approximately "<<int_hist-int_fit<<" events in the elastic peak."<<endl;
}
